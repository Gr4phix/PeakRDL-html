import os
import sys
import json
import shutil
import distutils.dir_util

import jinja2 as jj

from systemrdl.node import RootNode, AddressableNode, RegNode, RegfileNode, AddrmapNode, MemNode

class HTMLExporter:
    def __init__(self):
        
        self.output_dir = None
        self.RALIndex = []
        self.current_id = -1
        
        self.jj_env = jj.Environment(
            loader=jj.FileSystemLoader(os.path.join(os.path.dirname(__file__), "templates")),
            autoescape=jj.select_autoescape(['html']),
            undefined=jj.StrictUndefined
        )
    
    def export(self, node, output_dir, **kwargs):
        # If it is the root node, skip to top addrmap
        if isinstance(node, RootNode):
            node = node.top
        
        self.footer = kwargs.pop("footer", "Generated by RALBot HTML")
        self.title = kwargs.pop("title", "%s Reference" % node.get_property("name"))
        
        # Check for stray kwargs
        if kwargs:
            raise TypeError("got an unexpected keyword argument '%s'" % list(kwargs.keys())[0])
        
        self.output_dir = output_dir
        self.RALIndex = []
        self.current_id = -1
        
        # Copy static files
        static_dir = os.path.join(os.path.dirname(__file__), "static")
        distutils.dir_util.copy_tree(static_dir, self.output_dir, preserve_mode=0, preserve_times=0)
        
        # Make sure output directory structure exists
        os.makedirs(self.output_dir, exist_ok=True)
        os.makedirs(os.path.join(self.output_dir, "content"), exist_ok=True)
        
        # Traverse tree
        self.visit_addressable_node(node)
        
        # Write out RALIndex
        self.write_ral_index()
        
        # Write main index.html
        self.write_index_page()
    
    
    def visit_addressable_node(self, node, parent_id=None):
        self.current_id += 1
        this_id = self.current_id
        child_ids = []
        
        ral_entry = {
            'parent'    : parent_id,
            'children'  : child_ids,
            'name'      : node.inst.inst_name,
            'offset'    : node.inst.addr_offset,
            'size'      : node.size,
        }
        if node.inst.is_array:
            ral_entry['dims'] = node.inst.array_dimensions
            ral_entry['stride'] = node.inst.array_stride
            ral_entry['idxs'] = [0] * len(node.inst.array_dimensions)
        
        if isinstance(node, RegNode):
            ral_entry['fields'] = []
            for field in node.fields():
                ral_entry['fields'].append(field.inst.inst_name)
        
        # Insert entry now to ensure proper position in list
        self.RALIndex.append(ral_entry)
        
        # Recurse to children
        children = {}
        for child in node.children():
            if not isinstance(child, AddressableNode):
                continue
            child_id = self.visit_addressable_node(child, this_id)
            child_ids.append(child_id)
            children[child_id] = child
        
        # Generate page for this node
        self.write_page(this_id, node, children)
        
        return this_id
    
    
    def write_ral_index(self):
        path = os.path.join(self.output_dir, "js/data.js")
        with open(path, 'w') as fp:
            fp.write("var RALIndex = ")
            json.dump(self.RALIndex, fp, indent=2)
            fp.write(";")
    
    
    _template_map = {
        AddrmapNode : "addrmap.html",
        RegfileNode : "regfile.html",
        MemNode     : "mem.html",
        RegNode     : "reg.html",
    }
    
    def write_page(self, this_id, node, children):
        context = {
            'this_id': this_id,
            'node' : node,
            'children' : children,
        }
        
        template = self.jj_env.get_template(self._template_map[type(node)])
        stream = template.stream(context)
        output_path = os.path.join(self.output_dir, "content", "%d.html" % this_id)
        stream.dump(output_path)
    
    
    def write_index_page(self):
        context = {
            'title': self.title,
            'footer': self.footer
        }
        
        template = self.jj_env.get_template("index.html")
        stream = template.stream(context)
        output_path = os.path.join(self.output_dir, "index.html")
        stream.dump(output_path)
        

#===============================================================================
def export(node, output_dir, **kwargs):
    x = HTMLExporter(node, output_dir, kwargs)
    x.run()
    